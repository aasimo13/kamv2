#!/bin/bash

# USB Camera Tester Standalone Installer
# Installs everything needed without internet connection

# Get the directory containing this installer
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
INSTALLER_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
RESOURCES_DIR="$INSTALLER_DIR/Resources"

echo "🔧 Debug paths:"
echo "  Script dir: $SCRIPT_DIR"
echo "  Installer dir: $INSTALLER_DIR"
echo "  Resources dir: $RESOURCES_DIR"
echo ""

# Verify resources exist
if [ ! -d "$RESOURCES_DIR" ]; then
    echo "❌ Resources directory not found: $RESOURCES_DIR"
    echo "Available directories:"
    ls -la "$INSTALLER_DIR/"
    exit 1
fi

echo "🎥 USB Camera Tester Standalone Installer"
echo "========================================"
echo ""
echo "This will install the USB Camera Tester to your Applications folder."
echo ""
echo "🔧 System Info:"
echo "  macOS Version: $(sw_vers -productVersion)"
echo "  Architecture: $(uname -m)"
echo ""

# Check for Python and install dependencies
echo "Checking for Python..."
PYTHON_CMD=""
for python_path in /Library/Frameworks/Python.framework/Versions/3.13/bin/python3 /Library/Frameworks/Python.framework/Versions/*/bin/python3 /opt/homebrew/bin/python3 /usr/local/bin/python3 python3; do
    if command -v "$python_path" &> /dev/null; then
        PYTHON_CMD="$python_path"
        echo "✅ Found Python: $python_path"
        break
    fi
done

if [ -z "$PYTHON_CMD" ]; then
    echo ""
    echo "❌ Python 3 not found."
    echo ""
    osascript -e 'display dialog "Python 3 is required but not found.\n\nPlease install Python 3 from https://python.org\n\nThen run this installer again." buttons {"OK"} default button "OK" with icon stop'
    exit 1
fi

# Check and install required modules
echo "Checking Python modules..."
MODULES_NEEDED=()

# Check each required module with better error handling
echo "Testing module imports..."
for module in cv2 numpy PyQt6; do
    echo -n "  Checking $module... "
    if "$PYTHON_CMD" -c "import $module; print('OK')" 2>/dev/null | grep -q "OK"; then
        echo "✅ installed"
    else
        echo "❌ missing"
        case $module in
            "cv2") MODULES_NEEDED+=("opencv-python") ;;
            *) MODULES_NEEDED+=("$module") ;;
        esac
    fi
done

echo ""
if [ ${#MODULES_NEEDED[@]} -eq 0 ]; then
    echo "🎉 All Python modules are already installed!"
else
    echo "📦 Need to install: ${MODULES_NEEDED[*]}"
fi

# Install missing modules if any
if [ ${#MODULES_NEEDED[@]} -gt 0 ]; then
    echo ""
    echo "📦 Installing required Python modules..."
    echo "Missing modules: ${MODULES_NEEDED[*]}"
    echo ""

    # Get pip command with better detection
    PIP_CMD=""
    echo "Finding pip..."

    # Try python -m pip first (most reliable)
    if "$PYTHON_CMD" -m pip --version >/dev/null 2>&1; then
        PIP_CMD="$PYTHON_CMD -m pip"
        echo "✅ Found pip via python -m pip"
    else
        # Try standalone pip commands
        for pip_candidate in "${PYTHON_CMD%/*}/pip3" "${PYTHON_CMD%/*}/pip" pip3 pip; do
            if command -v "$pip_candidate" >/dev/null 2>&1 && "$pip_candidate" --version >/dev/null 2>&1; then
                PIP_CMD="$pip_candidate"
                echo "✅ Found pip: $pip_candidate"
                break
            fi
        done
    fi

    if [ -z "$PIP_CMD" ]; then
        echo "❌ pip not found. Installing pip..."
        "$PYTHON_CMD" -m ensurepip --default-pip 2>/dev/null || {
            osascript -e 'display dialog "Could not install pip automatically.\n\nPlease install pip manually:\n1. Download get-pip.py from https://bootstrap.pypa.io/get-pip.py\n2. Run: python3 get-pip.py\n\nThen run this installer again." buttons {"OK"} default button "OK" with icon stop'
            exit 1
        }
        PIP_CMD="$PYTHON_CMD -m pip"
    fi

    echo "Installing modules with: $PIP_CMD"

    # Detect architecture for proper package installation
    ARCH=$(uname -m)
    echo "Detected architecture: $ARCH"

    # Install each module with architecture-specific fixes
    for module in "${MODULES_NEEDED[@]}"; do
        echo "Installing $module for $ARCH architecture..."

        if [ "$module" = "numpy" ]; then
            # Install numpy version compatible with opencv-python
            if eval "$PIP_CMD install --user --force-reinstall --no-cache-dir 'numpy>=1.21.0,<2.3.0'" >/dev/null 2>&1; then
                echo "✅ $module installed successfully (compatible version)"
            else
                echo "⚠️  $module installation may have issues, but continuing..."
            fi
        elif [ "$module" = "opencv-python" ]; then
            # Uninstall any existing opencv to avoid architecture conflicts
            echo "  Removing any existing opencv installations..."
            eval "$PIP_CMD uninstall -y opencv-python opencv-contrib-python opencv-python-headless" >/dev/null 2>&1

            # Install opencv with specific version compatible with numpy
            echo "  Installing opencv-python for $ARCH..."
            if [ "$ARCH" = "arm64" ]; then
                # ARM64 - use compatible version with pre-compiled binaries
                if eval "$PIP_CMD install --user --force-reinstall --no-cache-dir --only-binary=all 'opencv-python>=4.8.0,<4.10.0'" >/dev/null 2>&1; then
                    echo "✅ $module installed successfully (ARM64 compatible version)"
                else
                    echo "⚠️  $module installation may have issues, trying fallback..."
                    eval "$PIP_CMD install --user --force-reinstall --no-cache-dir --only-binary=all opencv-python" >/dev/null 2>&1
                fi
            else
                # x86_64 - standard compatible version
                if eval "$PIP_CMD install --user --force-reinstall --no-cache-dir 'opencv-python>=4.8.0,<4.10.0'" >/dev/null 2>&1; then
                    echo "✅ $module installed successfully (x86_64 compatible version)"
                else
                    echo "⚠️  $module installation may have issues, trying fallback..."
                    eval "$PIP_CMD install --user --force-reinstall --no-cache-dir opencv-python" >/dev/null 2>&1
                fi
            fi
        elif [ "$module" = "PyQt6" ]; then
            # Install specific PyQt6 version for compatibility
            if eval "$PIP_CMD install --user --no-cache-dir 'PyQt6>=6.4.0,<6.8.0'" >/dev/null 2>&1; then
                echo "✅ $module installed successfully (compatible version)"
            else
                echo "⚠️  $module installation may have issues, but continuing..."
            fi
        else
            # Standard installation for other modules
            if eval "$PIP_CMD install --user --no-cache-dir '$module'" >/dev/null 2>&1; then
                echo "✅ $module installed successfully"
            else
                echo "⚠️  $module installation may have issues, but continuing..."
            fi
        fi
    done

    echo ""
    echo "✅ Module installation complete!"
    echo ""

    # Verify installation with detailed version info
    echo "Verifying installation with version details..."
    echo "Python path: $PYTHON_CMD"
    echo "Python version: $("$PYTHON_CMD" --version)"
    echo ""

    ALL_GOOD=true

    # Check numpy with version
    if "$PYTHON_CMD" -c "import numpy; print('✅ numpy version:', numpy.__version__)" 2>/dev/null; then
        # Also verify numpy is compatible with opencv
        NUMPY_VERSION=$("$PYTHON_CMD" -c "import numpy; print(numpy.__version__)" 2>/dev/null)
        echo "  ✅ numpy verified and compatible"
    else
        echo "  ❌ numpy still not working"
        ALL_GOOD=false
    fi

    # Check opencv with version
    if "$PYTHON_CMD" -c "import cv2; print('✅ opencv-python version:', cv2.__version__)" 2>/dev/null; then
        echo "  ✅ opencv-python verified"
    else
        echo "  ❌ opencv-python still not working"
        ALL_GOOD=false
    fi

    # Check PyQt6
    if "$PYTHON_CMD" -c "import PyQt6; from PyQt6.QtCore import QT_VERSION_STR; print('✅ PyQt6 version:', QT_VERSION_STR)" 2>/dev/null; then
        echo "  ✅ PyQt6 verified"
    else
        echo "  ❌ PyQt6 still not working"
        ALL_GOOD=false
    fi

    if [ "$ALL_GOOD" = false ]; then
        echo ""
        echo "❌ Some modules failed verification. Showing Python module paths:"
        "$PYTHON_CMD" -c "import sys; print('Python paths:'); [print('  -', p) for p in sys.path if p]" 2>/dev/null || true
        echo ""
        osascript -e 'display dialog "Some Python modules could not be installed automatically.\n\nThe installer detected version conflicts or path issues.\n\nPlease run the fix script:\nbash fix_numpy_issue.sh\n\nOr install manually with compatible versions:\npip3 install --user \"numpy>=1.21.0,<2.3.0\" \"opencv-python>=4.8.0,<4.10.0\" \"PyQt6>=6.4.0,<6.8.0\"" buttons {"OK"} default button "OK" with icon stop'
        exit 1
    fi
else
    echo "✅ All required Python modules are already installed!"
    echo "🚀 Proceeding directly to installation..."
fi

# Create Applications directory structure
echo ""
echo "Installing to Applications..."

APP_DIR="/Applications/USB Camera Tester.app"
APP_CONTENTS="$APP_DIR/Contents"
APP_RESOURCES="$APP_CONTENTS/Resources"
APP_MACOS="$APP_CONTENTS/MacOS"

# Remove existing installation
if [ -d "$APP_DIR" ]; then
    echo "Removing existing installation..."
    rm -rf "$APP_DIR"
fi

# Create new installation
mkdir -p "$APP_MACOS"
mkdir -p "$APP_RESOURCES"

# Copy camera test suite
echo "Installing camera test suite..."
cp -R "$RESOURCES_DIR/camera_test_suite" "$APP_RESOURCES/"

# Copy launcher to app resources
echo "Installing launcher..."
cp "$RESOURCES_DIR/Launch USB Camera Tester.command" "$APP_RESOURCES/"

# Also copy launcher to Desktop for easy access
echo "Adding launcher to Desktop..."
cp "$RESOURCES_DIR/Launch USB Camera Tester.command" "$HOME/Desktop/🎥 Launch USB Camera Tester.command"
chmod +x "$HOME/Desktop/🎥 Launch USB Camera Tester.command"

# And copy to Applications folder root for easy finding
echo "Adding launcher to Applications folder..."
cp "$RESOURCES_DIR/Launch USB Camera Tester.command" "/Applications/🎥 Launch USB Camera Tester.command"
chmod +x "/Applications/🎥 Launch USB Camera Tester.command"

# Create app launcher script
cat > "$APP_MACOS/USBCameraTester" << 'APPLAUNCHER'
#!/bin/bash
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
RESOURCES_DIR="$SCRIPT_DIR/../Resources"

# Ensure we have a proper GUI environment
export DISPLAY=${DISPLAY:-:0}

# Clear Claude Code environment variables that prevent GUI
unset CLAUDECODE
unset CLAUDE_CODE
unset CLAUDE_CODE_SSE_PORT
unset CLAUDE_CODE_ENTRYPOINT

# Find Python executable with all required modules
PYTHON_CMD=""
echo "Searching for compatible Python installation..."

for python_path in /Library/Frameworks/Python.framework/Versions/3.13/bin/python3 /Library/Frameworks/Python.framework/Versions/*/bin/python3 /opt/homebrew/bin/python3 /usr/local/bin/python3 python3 /usr/bin/python3 python; do
    if command -v "$python_path" &> /dev/null; then
        echo "Testing Python: $python_path"
        # Test if this Python can import all required modules
        if "$python_path" -c "import numpy, cv2, PyQt6; print('All modules available')" 2>/dev/null; then
            PYTHON_CMD="$python_path"
            echo "✅ Found compatible Python: $python_path"
            break
        else
            echo "  ❌ Missing modules in this Python"
        fi
    fi
done

if [ -z "$PYTHON_CMD" ]; then
    echo "❌ No compatible Python found with all required modules"
    osascript -e 'display dialog "Python 3 with required modules not found.\n\nRequired modules: numpy, opencv-python, PyQt6\n\nPlease run the installer or fix script to install dependencies." buttons {"OK"} default button "OK" with icon stop'
    exit 1
fi

echo "Using Python: $PYTHON_CMD"

# Change to the application directory
cd "$RESOURCES_DIR/camera_test_suite"

# Launch the application
"$PYTHON_CMD" main_pyqt6.py "$@"
APPLAUNCHER

chmod +x "$APP_MACOS/USBCameraTester"

# Create Info.plist
cat > "$APP_CONTENTS/Info.plist" << 'INFOPLIST'
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>CFBundleExecutable</key>
    <string>USBCameraTester</string>
    <key>CFBundleIdentifier</key>
    <string>com.usb-camera-tester.app</string>
    <key>CFBundleName</key>
    <string>USB Camera Tester</string>
    <key>CFBundleVersion</key>
    <string>4.0</string>
    <key>CFBundleShortVersionString</key>
    <string>4.0</string>
    <key>CFBundleInfoDictionaryVersion</key>
    <string>6.0</string>
    <key>CFBundlePackageType</key>
    <string>APPL</string>
    <key>LSMinimumSystemVersion</key>
    <string>10.14</string>
    <key>NSHighResolutionCapable</key>
    <true/>
    <key>NSCameraUsageDescription</key>
    <string>USB Camera Tester needs access to your camera to test USB camera hardware functionality and perform diagnostic tests.</string>
    <key>NSCameraUseContinuityCameraDeviceType</key>
    <true/>
    <key>CFBundleIconFile</key>
    <string>app_icon</string>
</dict>
</plist>
INFOPLIST

# Copy icon if it exists
if [ -f "$RESOURCES_DIR/camera_test_suite/icons/app_icon.icns" ]; then
    cp "$RESOURCES_DIR/camera_test_suite/icons/app_icon.icns" "$APP_RESOURCES/"
fi

# Set permissions
chmod -R 755 "$APP_DIR"
chmod +x "$APP_MACOS/USBCameraTester"
chmod +x "$APP_RESOURCES/Launch USB Camera Tester.command"

# Remove quarantine
xattr -cr "$APP_DIR" 2>/dev/null || true

echo ""
echo "✅ Installation complete!"
echo ""
echo "🎉 USB Camera Tester is now installed! You can use it in multiple ways:"
echo ""
echo "📱 MAIN APP:"
echo "   • USB Camera Tester (in Applications folder)"
echo ""
echo "🚀 EASY LAUNCHERS (Better Camera Permissions):"
echo "   • 🎥 Launch USB Camera Tester.command (on your Desktop)"
echo "   • 🎥 Launch USB Camera Tester.command (in Applications folder)"
echo ""
echo "💡 TIP: Use the launcher scripts for best camera access!"
echo ""

# Ask if user wants to launch now
osascript -e 'display dialog "🎉 Installation Complete!\n\nUSB Camera Tester is ready to use!\n\n📱 Main App: Applications folder\n🚀 Easy Launcher: On your Desktop\n\n💡 For best camera permissions, use the launcher on your Desktop\n\nWould you like to launch it now?" buttons {"Not Now", "Launch Camera Tester"} default button "Launch Camera Tester"' > /tmp/user_choice.txt 2>/dev/null

if grep -q "Launch Camera Tester" /tmp/user_choice.txt 2>/dev/null; then
    # Launch using the desktop launcher for best permissions
    open "$HOME/Desktop/🎥 Launch USB Camera Tester.command"
fi

rm -f /tmp/user_choice.txt 2>/dev/null || true
